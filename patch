diff --git a/Scant/ScanTemplate/AutoComputeXZT.cs b/Scant/ScanTemplate/AutoComputeXZT.cs
index 78346c0..4c3a85b 100644
--- a/Scant/ScanTemplate/AutoComputeXZT.cs
+++ b/Scant/ScanTemplate/AutoComputeXZT.cs
@@ -35,24 +35,10 @@ namespace ScanTemplate
                 if (global.Debug || (global.tag & 16) > 0)
                      ((Bitmap)_src.Clone(r, _src.PixelFormat)).Save("f:\\img\\" + num + "_offset2.jpg");            	
                 Bitmap bmp = (Bitmap)_src.Clone(r, _src.PixelFormat);
-                //BitmapData bmpdata = _src.LockBits(r,ImageLockMode.ReadOnly,_src.PixelFormat);
-                //暂不采用该方法
-            	Rectangle rp = new Rectangle(0,0,sca.Size.Width,sca.Size.Height);
-                int validblackcnt = rp.Width * rp.Height * 14 / 20;
-            	foreach(List<Point> lp in sca.list){
-            		List<int> blackpixs = new List<int>();
-            		foreach(Point p in lp){
-            			rp.Location = p;
-                        int cnt = Tools.BitmapTools.CountRectBlackcnt(bmp, rp);
-            			blackpixs.Add(cnt);
-            		}
-            		sb.Append( GetOptions(blackpixs,validblackcnt)+"|");
-            	}
-                //_src.UnlockBits(bmpdata);
+                ComputeSelectedOption(sb, sca, bmp);
             }
             return sb.ToString();
-        }
-        public string ComputeCustomDF(CustomArea sca, AutoAngle _angle ) // 改用接口 //KH
+        }public string ComputeCustomDF(CustomArea sca, AutoAngle _angle ) // 改用接口 //KH
         {
             StringBuilder sb = new StringBuilder();
             {
@@ -62,22 +48,7 @@ namespace ScanTemplate
                 r.Location = nL;
                 //((Bitmap)_src.Clone(r, _src.PixelFormat)).Save("f:\\out\\" + 22 + "_offset2.jpg");            	
                 Bitmap bmp = (Bitmap)_src.Clone(r, _src.PixelFormat);
-                //BitmapData bmpdata = _src.LockBits(r,ImageLockMode.ReadOnly,_src.PixelFormat);
-                //暂不采用该方法
-                Rectangle rp = new Rectangle(0, 0, sca.Size.Width, sca.Size.Height);
-                int validblackcnt = rp.Width * rp.Height * 8 / 20;
-                foreach (List<Point> lp in sca.list)
-                {
-                    List<int> blackpixs = new List<int>();
-                    foreach (Point p in lp)
-                    {
-                        rp.Location = p;
-                        int cnt = Tools.BitmapTools.CountRectBlackcnt(bmp, rp);
-                        blackpixs.Add(cnt);
-                    }
-                    sb.Append(GetKHOptions(blackpixs, validblackcnt));
-                }
-                //_src.UnlockBits(bmpdata);
+                ComputeSelectedOption(sb, sca, bmp,false);               
             }
             return sb.ToString();
         }
@@ -91,34 +62,38 @@ namespace ScanTemplate
                 r.Location = nL;
                 //((Bitmap)_src.Clone(r, _src.PixelFormat)).Save("f:\\out\\" + 22 + "_offset2.jpg");            	
                 Bitmap bmp = (Bitmap)_src.Clone(r, _src.PixelFormat);
-                //BitmapData bmpdata = _src.LockBits(r,ImageLockMode.ReadOnly,_src.PixelFormat);
-                //暂不采用该方法
-                Rectangle rp = new Rectangle(0, 0, sca.Size.Width, sca.Size.Height);
-                int validblackcnt = rp.Width * rp.Height * 8 / 20;
-                if(sca.Size.Height<25)
-                    validblackcnt = rp.Width * rp.Height * 12 / 20;
-                foreach (List<Point> lp in sca.list)
+                ComputeSelectedOption(sb, sca, bmp,false);                
+            }
+            sb.Replace("|", "");
+            return sb.ToString();
+        }
+        private void ComputeSelectedOption(StringBuilder sb, ListArea sca, Bitmap bmp,bool ABCDMode = true) //ABCDMode = false means NumberMode
+        {
+            Rectangle rp = new Rectangle(0, 0, sca.ItemSize.Width, sca.ItemSize.Height);
+            int validblackcnt = rp.Width * rp.Height * 14 / 20;
+            foreach (List<Point> lp in sca.list)
+            {
+                List<int> blackpixs = new List<int>();
+                foreach (Point p in lp)
                 {
-                    List<int> blackpixs = new List<int>();
-                    foreach (Point p in lp)
-                    {
-                        rp.Location = p;
-                        int cnt = Tools.BitmapTools.CountRectBlackcnt(bmp, rp);
-                        blackpixs.Add(cnt);
-                    }
-                    sb.Append(GetKHOptions(blackpixs, validblackcnt));
+                    rp.Location = p;
+                    int cnt = Tools.BitmapTools.CountRectBlackcnt(bmp, rp);
+                    blackpixs.Add(cnt);
                 }
-                //_src.UnlockBits(bmpdata);
+                sb.Append(GetOptions(blackpixs, validblackcnt,ABCDMode ) + "|");
             }
-            return sb.ToString();
         }
-        public string GetOptions(List<int> blackpixs,int validblackcnt){
-
+        private string GetOptions(List<int> blackpixs, int validblackcnt, bool ABCDMode = true)
+        {
+            char startchar = 'A';
+            if(!ABCDMode)
+                startchar = '0';
             StringBuilder sb = new StringBuilder();
             for (int i = 0; i < blackpixs.Count; i++)
             {
                 if (blackpixs[i] > validblackcnt)
-                    sb.Append(Convert.ToChar(i + 'A'));
+                    sb.Append(Convert.ToChar(i + startchar));
+
             }
             if (sb.Length > 0)
                 return sb.ToString();
@@ -130,20 +105,10 @@ namespace ScanTemplate
             if (max>avg2 && avg > st[2] && max - avg > avg - st[1])
             {
                 int index = blackpixs.IndexOf(max);
-                return Convert.ToChar(index + 'A').ToString();
-            }
-        	return "-";
-        }
-        public string GetKHOptions(List<int> blackpixs,int validblackcnt){
-            StringBuilder sb = new StringBuilder();
-            for (int i = 0; i < blackpixs.Count; i++)
-            {
-                if (blackpixs[i] > validblackcnt)
-                    sb.Append(Convert.ToChar(i + '0'));
+                return Convert.ToChar(index + startchar).ToString();
             }
-            if (sb.Length > 0)
-                return sb.ToString();
         	return "-";
         }
+        
     }
 }
diff --git a/Scant/ScanTemplate/Form/Components.cs b/Scant/ScanTemplate/Form/Components.cs
index 560e048..6e60e22 100644
--- a/Scant/ScanTemplate/Form/Components.cs
+++ b/Scant/ScanTemplate/Form/Components.cs
@@ -109,6 +109,17 @@ namespace ARTemplate
         
     }
     [JsonObject(MemberSerialization.OptIn)]
+    public class ListArea:Area
+    {
+        public ListArea()
+        {
+        }
+        [JsonIgnore]
+        public virtual Size ItemSize { get { return  new Size(); } }
+        [JsonProperty]
+        public List<List<Point>> list;
+    }
+    [JsonObject(MemberSerialization.OptIn)]
     public class FeaturePoint : Area
     {
         public FeaturePoint(Rectangle r, Point midpoint) // 0,左上  1，右上  2左下 3又下
@@ -145,7 +156,7 @@ namespace ARTemplate
         public int Direction { get; set; }
     }
     [JsonObject(MemberSerialization.OptIn)]
-    public class KaoHaoChoiceArea : Area
+    public class KaoHaoChoiceArea : ListArea
     {
         public KaoHaoChoiceArea()
         {
@@ -205,6 +216,13 @@ namespace ARTemplate
                 return _name;
             }
         }
+        public override Size ItemSize
+        {
+            get
+            {
+                return Size;
+            }
+        }
         public override string ToString()
         {
             return _name;
@@ -218,13 +236,13 @@ namespace ARTemplate
         [JsonProperty]
         public string Type { get; set; }
         // "填涂横向" || Type == "填涂纵向"
-        [JsonProperty]
-        public List<List<Point>> list;
+        //[JsonProperty]
+        //public List<List<Point>> list;
         [JsonProperty]
         public Size Size;
     }
     [JsonObject(MemberSerialization.OptIn)]
-    public class SingleChoiceArea : Area
+    public class SingleChoiceArea : ListArea
     {
         public SingleChoiceArea()
         {
@@ -275,6 +293,13 @@ namespace ARTemplate
                 return _name;
             }
         }
+        public override Size ItemSize
+        {
+            get
+            {
+                return Size;
+            }
+        }
         public int Count
         {
             get
@@ -287,8 +312,8 @@ namespace ARTemplate
             _name = name;
         }
         public string Name { get { return _name; } }
-        [JsonProperty]
-        public List<List<Point>> list;
+        //[JsonProperty]
+        //public List<List<Point>> list;
         [JsonProperty]
         public Size Size;
         [JsonProperty]
@@ -452,7 +477,7 @@ namespace ARTemplate
         private List<Area> _subareas;       
     }
     [JsonObject(MemberSerialization.OptIn)]
-    public class CustomArea : Area
+    public class CustomArea : ListArea
     {
         public CustomArea()
         {
@@ -502,6 +527,13 @@ namespace ARTemplate
                 return Name;
             }
         }
+        public override Size ItemSize
+        {
+            get
+            {
+                return Size;
+            }
+        }
         public override String ToString()
         {
             return Name;
@@ -516,8 +548,8 @@ namespace ARTemplate
         [JsonProperty]
         public string Type { get; set; }
         // "填涂横向" || Type == "填涂纵向"
-        [JsonProperty]
-        public List<List<Point>> list;
+        //[JsonProperty]
+        //public List<List<Point>> list;
         [JsonProperty]
         public Size Size;
     }
